datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  teamId        String?
  accounts      Account[]
  sessions      Session[]
  team          Team?     @relation(fields: [teamId], references: [id])
  progress      Progress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String @id @default(cuid())
  name        String
  description String?
  members     User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id          String @id @default(cuid())
  title       String
  description String
  category    Category
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  progress    Progress[]
}

model Progress {
  id        String @id @default(cuid())
  userId    String
  courseId  String
  progress  Int    @default(0)
  completed Boolean @default(false)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

enum Role {
  USER
  ADMIN
}

enum Category {
  PERSONAL_FINANCE
  CORPORATE_FINANCE
  MARKET_ANALYSIS
  OTHER
} 